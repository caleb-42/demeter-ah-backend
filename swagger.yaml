swagger: "2.0"
info:
  description: "Authors Haven - A Social platform for the creative at heart."
  version: "1.0.0"
  title: "Authors Haven"
basePath: /api/v1/
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    put:
      tags:
        - Users
      summary: Update user profile
      operationId: updateUserProfile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object that needs to be added to the app
          required: true
          schema:
            $ref: '#/definitions/UpdateProfile'
      responses:
        '200':
          description: User Successfully Updated
        '400':
          description: Error message
  /users/signup:
    post:
      tags:
        - Users
      summary: Add a new user account
      operationId: addUser
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object that needs to be added to the app
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        '201':
          description: User Registration successful
  /users/login:
    post:
      tags:
        - Users
      summary: log in registered user
      operationId: login user
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        '200':
          description: User Login in successful
  /users/reset-password:
    post:
      tags:
        - Users
      summary: Reset password
      operationId: reset password
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Email needed for password reset
          required: true
          schema:
            $ref: '#/definitions/ResetPassword'
      responses:
        '200':
          description: Password reset successful. Check your email for password reset link!
  /users/change-password:
    put:
      tags:
        - Users
      summary: Change password 
      operationId: change password
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
      - name: resetToken
        in: query
        description: reset token
        required: true
        type: string
      - name: body
        in: body
        description: Email needed for password reset
        required: true
        schema:
          $ref: '#/definitions/ChangePassword'
      responses:
        '200':
          description: Password has successfully been changed.
  /role/{username}:
    patch:
      tags:
        - Users
      summary: Change user role 
      operationId: changeRole
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
      - name: username
        in: path
        description: admin can change user role
        required: true
        type: string
      - name: x-access-token
        in: header
        description: Authorization token
        required: true
        type: string
      - name: body
        in: body
        description: Role to give to user
        required: true
        schema:
          $ref: '#/definitions/changeRole'
      responses:
        '200':
          description: User role updated successfully
        '400':
          description: Unauthorized
        '404':
          description: User does not exist
  /articles:
    post:
      tags:
        - Articles
      summary: create a new article
      operationId: addArticles
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A new article created by a user
          required: true
          schema:
            $ref: '#/definitions/NewArticle'
      responses:
        '201':
          description: Article created successfully
  /articles/rate/{slug}:
    post:
      tags:
        - Articles
      summary: rate an article
      operationId: rateArticle
      produces:
        - application/json
      parameters:
        - name: "slug"
          in: "path"
          description: An article slug to be rated by a user
          required: true
          type: string
        - name: x-access-token
          in: header
          description: Authorization token
          required: true
          type: string
        - name: "rate"
          in: body
          description: A user rating
          required: true
          schema:
            $ref: '#/definitions/ratings'
      responses:
        '201':
          description: Article rated successfully
        '400':
          description: "Invalid rating supplied"
    get:
      tags:
        - Articles
      summary: get all specific article ratings
      operationId: getArticleRatings
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: "slug"
          in: "path"
          description: An article slug to be rated by a user
          required: true
          type: string
      responses:
        '200':
          description: All ratings for Article
        '404':
          description: "Article does not exist"
  /articles/{slug}:
    get:
      tags:
        - Articles
      summary: Get single article
      description: "Get single article"
      operationId: getArticleBySlug
      produces:
        - application/json
      parameters:
        - name: "slug"
          in: "path"
          description: "slug of article to return"
          required: true
          type: "string"
      responses:
        200:
          description: "Article displayed successfully"
          schema:
            $ref: "#/definitions/getSingleArticle"
        404:
          description: "Article slug not found"
        400:
          description: "Invalid request supplied"
    delete:
      tags:
        - Articles
      summary: Delete single article
      description: "Delete single article"
      operationId: deleteArticleBySlug
      produces:
        - application/json
      parameters:
        - name: "slug"
          in: "path"
          description: "slug of article to return"
          required: true
          type: "string"
      responses:
        200:
          description: "Article Deleted successfully"
          schema:
            $ref: "#/definitions/getSingleArticle"
        401:
          description: "User not Authorized to delete article"
        404:
          description: "Article slug not found"
        400:
          description: "Invalid request supplied"
    put:
      tags:
        - Articles
      summary: Update single article
      description: "Update single article"
      operationId: updateArticleBySlug
      produces:
        - application/json
      parameters:
        - name: "slug"
          in: "path"
          description: "slug of article to return"
          required: true
          type: "string"
        - name: body
          in: body
          description: Email needed for password reset
          required: true
          schema:
            $ref: '#/definitions/UpdateArticle'
      responses:
        200:
          description: "Article Updated successfully"
          schema:
            $ref: "#/definitions/getSingleArticle"
        401:
          description: "User not Authorized to update article"
        404:
          description: "Article slug not found"
        400:
          description: "Invalid request supplied"
  /articles/vote/{slug}:
    post:
      tags:
        - "Articles"
      summary: Vote an Article
      description: Vote an article
      operationId: voteArticle
      produces:
        - application/json
      parameters:
        - name: slug
          in: path
          description: Slug of article to vote
          required: true
          type: string
        - name: x-access-token
          in: header
          description: Authorization token
          required: true
          type: string
      responses:
        200:
          description: You have unvote this article
        201:
          description: You upote this article
        400:
          description: Pass in the appropriate status (true or false)
        404:
          description: This article does not exist
  /articles/{slug}/comments:
    post:
      tags:
        - "Articles"
      summary: Comment on an article
      description: authenticated user should be able to comment on an article
      operationId: addComment
      produces:
        - application/json
      parameters:
        - name: slug
          in: path
          description: Slug of article to comment on
          required: true
          type: string
        - name: x-access-token
          in: header
          description: Authorization token
          required: true
          type: string
        - in: body
          name: content
          description: user comment to be added
          required: true
          schema:
            $ref: '#/definitions/addComment'
      responses:
        201:
          description: Comment added successfully
        400:
          description: Input your content
        404:
          description: Article does not exist
  /profiles/{username}:
    get:
      tags:
        - "Profile"
      summary: Get user profile
      description: "Gets spqcific user profile info"
      operationId: getUserProfileByUsername
      produces:
        - application/json
      parameters:
        - name: "username"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "Profile displayed successfully"
          schema:
            $ref: "#/definitions/getUserProfile"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /notifications/email-notify:
    patch:
      tags:
        - Notifications
      summary: change email notify
      operationId: emailNotify
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: update email notify field in users table
          required: true
          schema:
            $ref: '#/definitions/emailNotify'
      responses:
        '200':
          description: update user email notify
  /notifications/app-notify:
    patch:
      tags:
        - Notifications
      summary: change app notify
      operationId: appNotify
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: update app notify field in users table
          required: true
          schema:
            $ref: '#/definitions/appNotify'
      responses:
        '200':
          description: update user email notify
  /notifications:
    get:
      tags:
        - Notifications
      summary: get all user notification
      operationId: getNotification
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: update app notify field in users table
          required: true
          schema:
            $ref: '#/definitions/Notify'
      responses:
        '200':
          description: update user email notify
  /notifications/{id}:
    patch:
      tags:
        - Notifications
      summary: get read notifications 
      operationId: Notify
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "Id of notifcation to alter"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: update user email notify
definitions:
  Notify:
    type: object
    required: 
     - "name"
  emailNotify:
    type: object
    required: 
     - "name"
  appNotify:
    type: object
    required: 
     - "name"
  NewUser:
    type: object
    required:
      - firstName
      - lastName
      - email
      - password
      - username
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    xml:
      name: NewUser
  UpdateArticle:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      body:
        type: string
      image:
        type: string
    xml:
      name: NewUser
  NewArticle:
    type: object
    required:
      - title
      - description
      - body
      - images
    properties:
      title:
        type: string
      body:
        type: string
      description:
        type: string
      images:
        type: string
      tags:
        type: string (should be comma separated strings)
    xml:
      name: NewArticle
  ratings:
    type: object
    required:
      - rate
    properties:
      rate:
        type: string
    xml:
      name: rateArticle
  UpdateProfile:
    type: object
    required:
      - firstName
      - lastName
      - bio
      - image
      - username
    properties:
      firstName:
        type: string
      lastName:
        type: string
      bio:
        type: string
      image:
        type: string
        format: binary
      username:
        type: string
    xml:
      name: UpdateProfile
  ResetPassword:
    type: object
    required:
      - email
    properties:
      email: 
        type: string
    xml:
      name: resetPassword
  ChangePassword:
    type: object
    required:
      - password
    properties:
      password: 
        type: string
    xml:
      name: changePassword
  getUserProfile:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      email:
        type: "string"
        format: "email"
        example: "user@gmail.com"
      username:
        type: "string"
        example: "Vinay"
      bio:
        type: "string"
        description: "User bio"
      firtName:
        type: "string"
        example: "Larry"
      lastName:
        type: "string"
        example: "Baston"
      image:
        type: "string"
        example: "//temp/up.jpg"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-05T12:23:45.130Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-05T12:23:45.130Z"      
    xml:
      name: "getUserProfile"
  getSingleArticle:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      description:
        type: "string"
        format: "email"
        example: "user@gmail.com"
      body:
        type: "string"
        example: "Vinay"
      title:
        type: "string"
        description: "User bio"
      image:
        type: "string"
        example: "Larry"
      authorId:
        type: "string"
        example: 1
      slug:
        type: "string"
        example: "user-bio"
      author:
        type: object
        properties:
          bio: 
            type: "string"
          image: 
            type: "string"
          username: 
            type: "string"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-05T12:23:45.130Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-05T12:23:45.130Z"      
    xml:
      name: "getSingleArticle"
  changeRole:
    type: object
    required:
      - rate
    properties:
      rate:
        type: string
        example: admin
    xml:
      name: changeRole
  addComment:
    type: object
    required:
      - content
    properties:
      content:
        type: string
        example: sample user comment
    xml:
      name: addComment
